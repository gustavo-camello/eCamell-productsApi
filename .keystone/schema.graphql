""" A keystone list """
type User {
  id: ID!
  name: String
  email: String
  password_is_set: Boolean
  passwordResetToken_is_set: Boolean
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
  magicAuthToken_is_set: Boolean
  magicAuthIssuedAt: String
  magicAuthRedeemedAt: String
}

input UserWhereInput {
  AND: [UserWhereInput]
  OR: [UserWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  email: String
  email_not: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  email_i: String
  email_not_i: String
  email_contains_i: String
  email_not_contains_i: String
  email_starts_with_i: String
  email_not_starts_with_i: String
  email_ends_with_i: String
  email_not_ends_with_i: String
  email_in: [String]
  email_not_in: [String]
  password_is_set: Boolean
  passwordResetToken_is_set: Boolean
  passwordResetIssuedAt: String
  passwordResetIssuedAt_not: String
  passwordResetIssuedAt_lt: String
  passwordResetIssuedAt_lte: String
  passwordResetIssuedAt_gt: String
  passwordResetIssuedAt_gte: String
  passwordResetIssuedAt_in: [String]
  passwordResetIssuedAt_not_in: [String]
  passwordResetRedeemedAt: String
  passwordResetRedeemedAt_not: String
  passwordResetRedeemedAt_lt: String
  passwordResetRedeemedAt_lte: String
  passwordResetRedeemedAt_gt: String
  passwordResetRedeemedAt_gte: String
  passwordResetRedeemedAt_in: [String]
  passwordResetRedeemedAt_not_in: [String]
  magicAuthToken_is_set: Boolean
  magicAuthIssuedAt: String
  magicAuthIssuedAt_not: String
  magicAuthIssuedAt_lt: String
  magicAuthIssuedAt_lte: String
  magicAuthIssuedAt_gt: String
  magicAuthIssuedAt_gte: String
  magicAuthIssuedAt_in: [String]
  magicAuthIssuedAt_not_in: [String]
  magicAuthRedeemedAt: String
  magicAuthRedeemedAt_not: String
  magicAuthRedeemedAt_lt: String
  magicAuthRedeemedAt_lte: String
  magicAuthRedeemedAt_gt: String
  magicAuthRedeemedAt_gte: String
  magicAuthRedeemedAt_in: [String]
  magicAuthRedeemedAt_not_in: [String]
}

input UserWhereUniqueInput {
  id: ID!
}

enum SortUsersBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  passwordResetIssuedAt_ASC
  passwordResetIssuedAt_DESC
  passwordResetRedeemedAt_ASC
  passwordResetRedeemedAt_DESC
  magicAuthIssuedAt_ASC
  magicAuthIssuedAt_DESC
  magicAuthRedeemedAt_ASC
  magicAuthRedeemedAt_DESC
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  passwordResetToken: String
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
  magicAuthToken: String
  magicAuthIssuedAt: String
  magicAuthRedeemedAt: String
}

input UsersUpdateInput {
  id: ID!
  data: UserUpdateInput
}

input UserCreateInput {
  name: String
  email: String
  password: String
  passwordResetToken: String
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
  magicAuthToken: String
  magicAuthIssuedAt: String
  magicAuthRedeemedAt: String
}

input UsersCreateInput {
  data: UserCreateInput
}

input ReviewRelateToManyInput {
  create: [ReviewCreateInput]
  connect: [ReviewWhereUniqueInput]
  disconnect: [ReviewWhereUniqueInput]
  disconnectAll: Boolean
}

input ProductCategoryRelateToManyInput {
  create: [ProductCategoryCreateInput]
  connect: [ProductCategoryWhereUniqueInput]
  disconnect: [ProductCategoryWhereUniqueInput]
  disconnectAll: Boolean
}

input ProductImageRelateToOneInput {
  create: ProductImageCreateInput
  connect: ProductImageWhereUniqueInput
  disconnect: ProductImageWhereUniqueInput
  disconnectAll: Boolean
}

""" A keystone list """
type Product {
  id: ID!
  name: String
  description: String
  reviews(where: ReviewWhereInput, search: String, sortBy: [SortReviewsBy!], orderBy: String, first: Int, skip: Int): [Review!]!
  _reviewsMeta(where: ReviewWhereInput, search: String, sortBy: [SortReviewsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta
  featured: Boolean
  category(where: ProductCategoryWhereInput, search: String, sortBy: [SortProductCategoriesBy!], orderBy: String, first: Int, skip: Int): [ProductCategory!]!
  _categoryMeta(where: ProductCategoryWhereInput, search: String, sortBy: [SortProductCategoriesBy!], orderBy: String, first: Int, skip: Int): _QueryMeta
  price: Int
  photo: ProductImage
}

input ProductWhereInput {
  AND: [ProductWhereInput]
  OR: [ProductWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  description: String
  description_not: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  description_i: String
  description_not_i: String
  description_contains_i: String
  description_not_contains_i: String
  description_starts_with_i: String
  description_not_starts_with_i: String
  description_ends_with_i: String
  description_not_ends_with_i: String
  description_in: [String]
  description_not_in: [String]

  """ condition must be true for all nodes """
  reviews_every: ReviewWhereInput

  """ condition must be true for at least 1 node """
  reviews_some: ReviewWhereInput

  """ condition must be false for all nodes """
  reviews_none: ReviewWhereInput
  featured: Boolean
  featured_not: Boolean

  """ condition must be true for all nodes """
  category_every: ProductCategoryWhereInput

  """ condition must be true for at least 1 node """
  category_some: ProductCategoryWhereInput

  """ condition must be false for all nodes """
  category_none: ProductCategoryWhereInput
  price: Int
  price_not: Int
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  price_in: [Int]
  price_not_in: [Int]
  photo: ProductImageWhereInput
  photo_is_null: Boolean
}

input ProductWhereUniqueInput {
  id: ID!
}

enum SortProductsBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  reviews_ASC
  reviews_DESC
  featured_ASC
  featured_DESC
  category_ASC
  category_DESC
  price_ASC
  price_DESC
  photo_ASC
  photo_DESC
}

input ProductUpdateInput {
  name: String
  description: String
  reviews: ReviewRelateToManyInput
  featured: Boolean
  category: ProductCategoryRelateToManyInput
  price: Int
  photo: ProductImageRelateToOneInput
}

input ProductsUpdateInput {
  id: ID!
  data: ProductUpdateInput
}

input ProductCreateInput {
  name: String
  description: String
  reviews: ReviewRelateToManyInput
  featured: Boolean
  category: ProductCategoryRelateToManyInput
  price: Int
  photo: ProductImageRelateToOneInput
}

input ProductsCreateInput {
  data: ProductCreateInput
}

type CloudinaryImage_File {
  id: ID
  path: String
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """ Rewrites the filename to be this pretty string. Do not include `/` or `.` 
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

input ProductRelateToOneInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
  disconnect: ProductWhereUniqueInput
  disconnectAll: Boolean
}

""" A keystone list """
type ProductImage {
  id: ID!
  image: CloudinaryImage_File
  altText: String
  product: Product
}

input ProductImageWhereInput {
  AND: [ProductImageWhereInput]
  OR: [ProductImageWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  image: String
  image_not: String
  image_in: [String]
  image_not_in: [String]
  altText: String
  altText_not: String
  altText_contains: String
  altText_not_contains: String
  altText_starts_with: String
  altText_not_starts_with: String
  altText_ends_with: String
  altText_not_ends_with: String
  altText_i: String
  altText_not_i: String
  altText_contains_i: String
  altText_not_contains_i: String
  altText_starts_with_i: String
  altText_not_starts_with_i: String
  altText_ends_with_i: String
  altText_not_ends_with_i: String
  altText_in: [String]
  altText_not_in: [String]
  product: ProductWhereInput
  product_is_null: Boolean
}

input ProductImageWhereUniqueInput {
  id: ID!
}

enum SortProductImagesBy {
  id_ASC
  id_DESC
  altText_ASC
  altText_DESC
  product_ASC
  product_DESC
}

input ProductImageUpdateInput {
  image: Upload
  altText: String
  product: ProductRelateToOneInput
}

input ProductImagesUpdateInput {
  id: ID!
  data: ProductImageUpdateInput
}

input ProductImageCreateInput {
  image: Upload
  altText: String
  product: ProductRelateToOneInput
}

input ProductImagesCreateInput {
  data: ProductImageCreateInput
}

""" A keystone list """
type Review {
  id: ID!
  review: String
  customerId: String
  rating: Int
  product: Product
}

input ReviewWhereInput {
  AND: [ReviewWhereInput]
  OR: [ReviewWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  review: String
  review_not: String
  review_contains: String
  review_not_contains: String
  review_starts_with: String
  review_not_starts_with: String
  review_ends_with: String
  review_not_ends_with: String
  review_i: String
  review_not_i: String
  review_contains_i: String
  review_not_contains_i: String
  review_starts_with_i: String
  review_not_starts_with_i: String
  review_ends_with_i: String
  review_not_ends_with_i: String
  review_in: [String]
  review_not_in: [String]
  customerId: String
  customerId_not: String
  customerId_contains: String
  customerId_not_contains: String
  customerId_starts_with: String
  customerId_not_starts_with: String
  customerId_ends_with: String
  customerId_not_ends_with: String
  customerId_i: String
  customerId_not_i: String
  customerId_contains_i: String
  customerId_not_contains_i: String
  customerId_starts_with_i: String
  customerId_not_starts_with_i: String
  customerId_ends_with_i: String
  customerId_not_ends_with_i: String
  customerId_in: [String]
  customerId_not_in: [String]
  rating: Int
  rating_not: Int
  rating_lt: Int
  rating_lte: Int
  rating_gt: Int
  rating_gte: Int
  rating_in: [Int]
  rating_not_in: [Int]
  product: ProductWhereInput
  product_is_null: Boolean
}

input ReviewWhereUniqueInput {
  id: ID!
}

enum SortReviewsBy {
  id_ASC
  id_DESC
  review_ASC
  review_DESC
  customerId_ASC
  customerId_DESC
  rating_ASC
  rating_DESC
  product_ASC
  product_DESC
}

input ReviewUpdateInput {
  review: String
  customerId: String
  rating: Int
  product: ProductRelateToOneInput
}

input ReviewsUpdateInput {
  id: ID!
  data: ReviewUpdateInput
}

input ReviewCreateInput {
  review: String
  customerId: String
  rating: Int
  product: ProductRelateToOneInput
}

input ReviewsCreateInput {
  data: ReviewCreateInput
}

input ProductRelateToManyInput {
  create: [ProductCreateInput]
  connect: [ProductWhereUniqueInput]
  disconnect: [ProductWhereUniqueInput]
  disconnectAll: Boolean
}

""" A keystone list """
type ProductCategory {
  id: ID!
  name: String
  products(where: ProductWhereInput, search: String, sortBy: [SortProductsBy!], orderBy: String, first: Int, skip: Int): [Product!]!
  _productsMeta(where: ProductWhereInput, search: String, sortBy: [SortProductsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta
}

input ProductCategoryWhereInput {
  AND: [ProductCategoryWhereInput]
  OR: [ProductCategoryWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]

  """ condition must be true for all nodes """
  products_every: ProductWhereInput

  """ condition must be true for at least 1 node """
  products_some: ProductWhereInput

  """ condition must be false for all nodes """
  products_none: ProductWhereInput
}

input ProductCategoryWhereUniqueInput {
  id: ID!
}

enum SortProductCategoriesBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  products_ASC
  products_DESC
}

input ProductCategoryUpdateInput {
  name: String
  products: ProductRelateToManyInput
}

input ProductCategoriesUpdateInput {
  id: ID!
  data: ProductCategoryUpdateInput
}

input ProductCategoryCreateInput {
  name: String
  products: ProductRelateToManyInput
}

input ProductCategoriesCreateInput {
  data: ProductCategoryCreateInput
}

input WishListItemRelateToManyInput {
  create: [WishListItemCreateInput]
  connect: [WishListItemWhereUniqueInput]
  disconnect: [WishListItemWhereUniqueInput]
  disconnectAll: Boolean
}

""" A keystone list """
type WishList {
  id: ID!
  customerId: String
  wishListItems(where: WishListItemWhereInput, search: String, sortBy: [SortWishListItemsBy!], orderBy: String, first: Int, skip: Int): [WishListItem!]!
  _wishListItemsMeta(where: WishListItemWhereInput, search: String, sortBy: [SortWishListItemsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta
}

input WishListWhereInput {
  AND: [WishListWhereInput]
  OR: [WishListWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  customerId: String
  customerId_not: String
  customerId_contains: String
  customerId_not_contains: String
  customerId_starts_with: String
  customerId_not_starts_with: String
  customerId_ends_with: String
  customerId_not_ends_with: String
  customerId_i: String
  customerId_not_i: String
  customerId_contains_i: String
  customerId_not_contains_i: String
  customerId_starts_with_i: String
  customerId_not_starts_with_i: String
  customerId_ends_with_i: String
  customerId_not_ends_with_i: String
  customerId_in: [String]
  customerId_not_in: [String]

  """ condition must be true for all nodes """
  wishListItems_every: WishListItemWhereInput

  """ condition must be true for at least 1 node """
  wishListItems_some: WishListItemWhereInput

  """ condition must be false for all nodes """
  wishListItems_none: WishListItemWhereInput
}

input WishListWhereUniqueInput {
  id: ID!
}

enum SortWishListsBy {
  id_ASC
  id_DESC
  customerId_ASC
  customerId_DESC
  wishListItems_ASC
  wishListItems_DESC
}

input WishListUpdateInput {
  customerId: String
  wishListItems: WishListItemRelateToManyInput
}

input WishListsUpdateInput {
  id: ID!
  data: WishListUpdateInput
}

input WishListCreateInput {
  customerId: String
  wishListItems: WishListItemRelateToManyInput
}

input WishListsCreateInput {
  data: WishListCreateInput
}

input WishListRelateToOneInput {
  create: WishListCreateInput
  connect: WishListWhereUniqueInput
  disconnect: WishListWhereUniqueInput
  disconnectAll: Boolean
}

""" A keystone list """
type WishListItem {
  id: ID!
  productId: String
  wishList: WishList
  wishListId: String
}

input WishListItemWhereInput {
  AND: [WishListItemWhereInput]
  OR: [WishListItemWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  productId: String
  productId_not: String
  productId_contains: String
  productId_not_contains: String
  productId_starts_with: String
  productId_not_starts_with: String
  productId_ends_with: String
  productId_not_ends_with: String
  productId_i: String
  productId_not_i: String
  productId_contains_i: String
  productId_not_contains_i: String
  productId_starts_with_i: String
  productId_not_starts_with_i: String
  productId_ends_with_i: String
  productId_not_ends_with_i: String
  productId_in: [String]
  productId_not_in: [String]
  wishList: WishListWhereInput
  wishList_is_null: Boolean
  wishListId: String
  wishListId_not: String
  wishListId_contains: String
  wishListId_not_contains: String
  wishListId_starts_with: String
  wishListId_not_starts_with: String
  wishListId_ends_with: String
  wishListId_not_ends_with: String
  wishListId_i: String
  wishListId_not_i: String
  wishListId_contains_i: String
  wishListId_not_contains_i: String
  wishListId_starts_with_i: String
  wishListId_not_starts_with_i: String
  wishListId_ends_with_i: String
  wishListId_not_ends_with_i: String
  wishListId_in: [String]
  wishListId_not_in: [String]
}

input WishListItemWhereUniqueInput {
  id: ID!
}

enum SortWishListItemsBy {
  id_ASC
  id_DESC
  productId_ASC
  productId_DESC
  wishList_ASC
  wishList_DESC
  wishListId_ASC
  wishListId_DESC
}

input WishListItemUpdateInput {
  productId: String
  wishList: WishListRelateToOneInput
  wishListId: String
}

input WishListItemsUpdateInput {
  id: ID!
  data: WishListItemUpdateInput
}

input WishListItemCreateInput {
  productId: String
  wishList: WishListRelateToOneInput
  wishListId: String
}

input WishListItemsCreateInput {
  data: WishListItemCreateInput
}

input CartItemRelateToManyInput {
  create: [CartItemCreateInput]
  connect: [CartItemWhereUniqueInput]
  disconnect: [CartItemWhereUniqueInput]
  disconnectAll: Boolean
}

""" A keystone list """
type Cart {
  id: ID!
  customerId: String
  cartItems(where: CartItemWhereInput, search: String, sortBy: [SortCartItemsBy!], orderBy: String, first: Int, skip: Int): [CartItem!]!
  _cartItemsMeta(where: CartItemWhereInput, search: String, sortBy: [SortCartItemsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta
}

input CartWhereInput {
  AND: [CartWhereInput]
  OR: [CartWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  customerId: String
  customerId_not: String
  customerId_contains: String
  customerId_not_contains: String
  customerId_starts_with: String
  customerId_not_starts_with: String
  customerId_ends_with: String
  customerId_not_ends_with: String
  customerId_i: String
  customerId_not_i: String
  customerId_contains_i: String
  customerId_not_contains_i: String
  customerId_starts_with_i: String
  customerId_not_starts_with_i: String
  customerId_ends_with_i: String
  customerId_not_ends_with_i: String
  customerId_in: [String]
  customerId_not_in: [String]

  """ condition must be true for all nodes """
  cartItems_every: CartItemWhereInput

  """ condition must be true for at least 1 node """
  cartItems_some: CartItemWhereInput

  """ condition must be false for all nodes """
  cartItems_none: CartItemWhereInput
}

input CartWhereUniqueInput {
  id: ID!
}

enum SortCartsBy {
  id_ASC
  id_DESC
  customerId_ASC
  customerId_DESC
  cartItems_ASC
  cartItems_DESC
}

input CartUpdateInput {
  customerId: String
  cartItems: CartItemRelateToManyInput
}

input CartsUpdateInput {
  id: ID!
  data: CartUpdateInput
}

input CartCreateInput {
  customerId: String
  cartItems: CartItemRelateToManyInput
}

input CartsCreateInput {
  data: CartCreateInput
}

input CartRelateToOneInput {
  create: CartCreateInput
  connect: CartWhereUniqueInput
  disconnect: CartWhereUniqueInput
  disconnectAll: Boolean
}

""" A keystone list """
type CartItem {
  id: ID!
  quantity: Int
  productId: String
  cart: Cart
  cartId: String
}

input CartItemWhereInput {
  AND: [CartItemWhereInput]
  OR: [CartItemWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  quantity: Int
  quantity_not: Int
  quantity_lt: Int
  quantity_lte: Int
  quantity_gt: Int
  quantity_gte: Int
  quantity_in: [Int]
  quantity_not_in: [Int]
  productId: String
  productId_not: String
  productId_contains: String
  productId_not_contains: String
  productId_starts_with: String
  productId_not_starts_with: String
  productId_ends_with: String
  productId_not_ends_with: String
  productId_i: String
  productId_not_i: String
  productId_contains_i: String
  productId_not_contains_i: String
  productId_starts_with_i: String
  productId_not_starts_with_i: String
  productId_ends_with_i: String
  productId_not_ends_with_i: String
  productId_in: [String]
  productId_not_in: [String]
  cart: CartWhereInput
  cart_is_null: Boolean
  cartId: String
  cartId_not: String
  cartId_contains: String
  cartId_not_contains: String
  cartId_starts_with: String
  cartId_not_starts_with: String
  cartId_ends_with: String
  cartId_not_ends_with: String
  cartId_i: String
  cartId_not_i: String
  cartId_contains_i: String
  cartId_not_contains_i: String
  cartId_starts_with_i: String
  cartId_not_starts_with_i: String
  cartId_ends_with_i: String
  cartId_not_ends_with_i: String
  cartId_in: [String]
  cartId_not_in: [String]
}

input CartItemWhereUniqueInput {
  id: ID!
}

enum SortCartItemsBy {
  id_ASC
  id_DESC
  quantity_ASC
  quantity_DESC
  productId_ASC
  productId_DESC
  cart_ASC
  cart_DESC
  cartId_ASC
  cartId_DESC
}

input CartItemUpdateInput {
  quantity: Int
  productId: String
  cart: CartRelateToOneInput
  cartId: String
}

input CartItemsUpdateInput {
  id: ID!
  data: CartItemUpdateInput
}

input CartItemCreateInput {
  quantity: Int
  productId: String
  cart: CartRelateToOneInput
  cartId: String
}

input CartItemsCreateInput {
  data: CartItemCreateInput
}

input OrderRelateToOneInput {
  create: OrderCreateInput
  connect: OrderWhereUniqueInput
  disconnect: OrderWhereUniqueInput
  disconnectAll: Boolean
}

""" A keystone list """
type OrderItem {
  id: ID!
  quantity: Int
  productId: String
  price: Int
  order: Order
}

input OrderItemWhereInput {
  AND: [OrderItemWhereInput]
  OR: [OrderItemWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  quantity: Int
  quantity_not: Int
  quantity_lt: Int
  quantity_lte: Int
  quantity_gt: Int
  quantity_gte: Int
  quantity_in: [Int]
  quantity_not_in: [Int]
  productId: String
  productId_not: String
  productId_contains: String
  productId_not_contains: String
  productId_starts_with: String
  productId_not_starts_with: String
  productId_ends_with: String
  productId_not_ends_with: String
  productId_i: String
  productId_not_i: String
  productId_contains_i: String
  productId_not_contains_i: String
  productId_starts_with_i: String
  productId_not_starts_with_i: String
  productId_ends_with_i: String
  productId_not_ends_with_i: String
  productId_in: [String]
  productId_not_in: [String]
  price: Int
  price_not: Int
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  price_in: [Int]
  price_not_in: [Int]
  order: OrderWhereInput
  order_is_null: Boolean
}

input OrderItemWhereUniqueInput {
  id: ID!
}

enum SortOrderItemsBy {
  id_ASC
  id_DESC
  quantity_ASC
  quantity_DESC
  productId_ASC
  productId_DESC
  price_ASC
  price_DESC
  order_ASC
  order_DESC
}

input OrderItemUpdateInput {
  quantity: Int
  productId: String
  price: Int
  order: OrderRelateToOneInput
}

input OrderItemsUpdateInput {
  id: ID!
  data: OrderItemUpdateInput
}

input OrderItemCreateInput {
  quantity: Int
  productId: String
  price: Int
  order: OrderRelateToOneInput
}

input OrderItemsCreateInput {
  data: OrderItemCreateInput
}

input OrderItemRelateToManyInput {
  create: [OrderItemCreateInput]
  connect: [OrderItemWhereUniqueInput]
  disconnect: [OrderItemWhereUniqueInput]
  disconnectAll: Boolean
}

""" A keystone list """
type Order {
  id: ID!
  total: Int
  items(where: OrderItemWhereInput, search: String, sortBy: [SortOrderItemsBy!], orderBy: String, first: Int, skip: Int): [OrderItem!]!
  _itemsMeta(where: OrderItemWhereInput, search: String, sortBy: [SortOrderItemsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta
  customerId: String
  charge: String
}

input OrderWhereInput {
  AND: [OrderWhereInput]
  OR: [OrderWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  total: Int
  total_not: Int
  total_lt: Int
  total_lte: Int
  total_gt: Int
  total_gte: Int
  total_in: [Int]
  total_not_in: [Int]

  """ condition must be true for all nodes """
  items_every: OrderItemWhereInput

  """ condition must be true for at least 1 node """
  items_some: OrderItemWhereInput

  """ condition must be false for all nodes """
  items_none: OrderItemWhereInput
  customerId: String
  customerId_not: String
  customerId_contains: String
  customerId_not_contains: String
  customerId_starts_with: String
  customerId_not_starts_with: String
  customerId_ends_with: String
  customerId_not_ends_with: String
  customerId_i: String
  customerId_not_i: String
  customerId_contains_i: String
  customerId_not_contains_i: String
  customerId_starts_with_i: String
  customerId_not_starts_with_i: String
  customerId_ends_with_i: String
  customerId_not_ends_with_i: String
  customerId_in: [String]
  customerId_not_in: [String]
  charge: String
  charge_not: String
  charge_contains: String
  charge_not_contains: String
  charge_starts_with: String
  charge_not_starts_with: String
  charge_ends_with: String
  charge_not_ends_with: String
  charge_i: String
  charge_not_i: String
  charge_contains_i: String
  charge_not_contains_i: String
  charge_starts_with_i: String
  charge_not_starts_with_i: String
  charge_ends_with_i: String
  charge_not_ends_with_i: String
  charge_in: [String]
  charge_not_in: [String]
}

input OrderWhereUniqueInput {
  id: ID!
}

enum SortOrdersBy {
  id_ASC
  id_DESC
  total_ASC
  total_DESC
  items_ASC
  items_DESC
  customerId_ASC
  customerId_DESC
  charge_ASC
  charge_DESC
}

input OrderUpdateInput {
  total: Int
  items: OrderItemRelateToManyInput
  customerId: String
  charge: String
}

input OrdersUpdateInput {
  id: ID!
  data: OrderUpdateInput
}

input OrderCreateInput {
  total: Int
  items: OrderItemRelateToManyInput
  customerId: String
  charge: String
}

input OrdersCreateInput {
  data: OrderCreateInput
}

""" A keystone list """
type Customer {
  id: ID!
  firstName: String
  lastName: String
  email: String
  password_is_set: Boolean
  address: String
}

input CustomerWhereInput {
  AND: [CustomerWhereInput]
  OR: [CustomerWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  firstName: String
  firstName_not: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  firstName_i: String
  firstName_not_i: String
  firstName_contains_i: String
  firstName_not_contains_i: String
  firstName_starts_with_i: String
  firstName_not_starts_with_i: String
  firstName_ends_with_i: String
  firstName_not_ends_with_i: String
  firstName_in: [String]
  firstName_not_in: [String]
  lastName: String
  lastName_not: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  lastName_i: String
  lastName_not_i: String
  lastName_contains_i: String
  lastName_not_contains_i: String
  lastName_starts_with_i: String
  lastName_not_starts_with_i: String
  lastName_ends_with_i: String
  lastName_not_ends_with_i: String
  lastName_in: [String]
  lastName_not_in: [String]
  email: String
  email_not: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  email_i: String
  email_not_i: String
  email_contains_i: String
  email_not_contains_i: String
  email_starts_with_i: String
  email_not_starts_with_i: String
  email_ends_with_i: String
  email_not_ends_with_i: String
  email_in: [String]
  email_not_in: [String]
  password_is_set: Boolean
  address: String
  address_not: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  address_i: String
  address_not_i: String
  address_contains_i: String
  address_not_contains_i: String
  address_starts_with_i: String
  address_not_starts_with_i: String
  address_ends_with_i: String
  address_not_ends_with_i: String
  address_in: [String]
  address_not_in: [String]
}

input CustomerWhereUniqueInput {
  id: ID!
}

enum SortCustomersBy {
  id_ASC
  id_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  email_ASC
  email_DESC
  address_ASC
  address_DESC
}

input CustomerUpdateInput {
  firstName: String
  lastName: String
  email: String
  password: String
  address: String
}

input CustomersUpdateInput {
  id: ID!
  data: CustomerUpdateInput
}

input CustomerCreateInput {
  firstName: String
  lastName: String
  email: String
  password: String
  address: String
}

input CustomersCreateInput {
  data: CustomerCreateInput
}

""" A keystone list """
type Storefront {
  id: ID!
  storeName: String
  mainBanner: CloudinaryImage_File
  altText: String
}

input StorefrontWhereInput {
  AND: [StorefrontWhereInput]
  OR: [StorefrontWhereInput]
  id: ID
  id_not: ID
  id_in: [ID]
  id_not_in: [ID]
  storeName: String
  storeName_not: String
  storeName_contains: String
  storeName_not_contains: String
  storeName_starts_with: String
  storeName_not_starts_with: String
  storeName_ends_with: String
  storeName_not_ends_with: String
  storeName_i: String
  storeName_not_i: String
  storeName_contains_i: String
  storeName_not_contains_i: String
  storeName_starts_with_i: String
  storeName_not_starts_with_i: String
  storeName_ends_with_i: String
  storeName_not_ends_with_i: String
  storeName_in: [String]
  storeName_not_in: [String]
  mainBanner: String
  mainBanner_not: String
  mainBanner_in: [String]
  mainBanner_not_in: [String]
  altText: String
  altText_not: String
  altText_contains: String
  altText_not_contains: String
  altText_starts_with: String
  altText_not_starts_with: String
  altText_ends_with: String
  altText_not_ends_with: String
  altText_i: String
  altText_not_i: String
  altText_contains_i: String
  altText_not_contains_i: String
  altText_starts_with_i: String
  altText_not_starts_with_i: String
  altText_ends_with_i: String
  altText_not_ends_with_i: String
  altText_in: [String]
  altText_not_in: [String]
}

input StorefrontWhereUniqueInput {
  id: ID!
}

enum SortStorefrontsBy {
  id_ASC
  id_DESC
  storeName_ASC
  storeName_DESC
  altText_ASC
  altText_DESC
}

input StorefrontUpdateInput {
  storeName: String
  mainBanner: Upload
  altText: String
}

input StorefrontsUpdateInput {
  id: ID!
  data: StorefrontUpdateInput
}

input StorefrontCreateInput {
  storeName: String
  mainBanner: Upload
  altText: String
}

input StorefrontsCreateInput {
  data: StorefrontCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type _ListAccess {
  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'create' operations.
  NOTE: 'create' can only return a Boolean.
  It is not possible to specify a declarative Where clause for this
  operation
  """
  create: Boolean

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'read' operations.
  """
  read: JSON

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'update' operations.
  """
  update: JSON

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'delete' operations.
  """
  delete: JSON

  """
  Access Control settings for the currently logged in (or anonymous)
  user when performing 'auth' operations.
  """
  auth: JSON
}

type _ListQueries {
  """Single-item query name"""
  item: String

  """All-items query name"""
  list: String

  """List metadata query name"""
  meta: String
}

type _ListMutations {
  """Create mutation name"""
  create: String

  """Create many mutation name"""
  createMany: String

  """Update mutation name"""
  update: String

  """Update many mutation name"""
  updateMany: String

  """Delete mutation name"""
  delete: String

  """Delete many mutation name"""
  deleteMany: String
}

type _ListInputTypes {
  """Input type for matching multiple items"""
  whereInput: String

  """Input type for matching a unique item"""
  whereUniqueInput: String

  """Create mutation input type name"""
  createInput: String

  """Create many mutation input type name"""
  createManyInput: String

  """Update mutation name input"""
  updateInput: String

  """Update many mutation name input"""
  updateManyInput: String
}

type _ListSchemaFields {
  """The path of the field in its list"""
  path: String

  """The name of the field in its list"""
  name: String @deprecated(reason: "Use `path` instead")

  """The field type (ie, Checkbox, Text, etc)"""
  type: String
}

type _ListSchemaRelatedFields {
  """The typename as used in GraphQL queries"""
  type: String

  """A list of GraphQL field names"""
  fields: [String]
}

type _ListSchema {
  """The typename as used in GraphQL queries"""
  type: String

  """
  Top level GraphQL query names which either return this type, or
  provide aggregate information about this type
  """
  queries: _ListQueries

  """Top-level GraphQL mutation names"""
  mutations: _ListMutations

  """Top-level GraphQL input types"""
  inputTypes: _ListInputTypes

  """Information about fields defined on this list"""
  fields(where: _ListSchemaFieldsInput): [_ListSchemaFields]

  """
  Information about fields on other types which return this type, or
  provide aggregate information about this type
  """
  relatedFields: [_ListSchemaRelatedFields]
}

type _ListMeta {
  """The Keystone list key"""
  key: String

  """The Keystone List name"""
  name: String @deprecated(reason: "Use `key` instead")

  """The list's user-facing description"""
  description: String

  """The list's display name in the Admin UI"""
  label: String

  """The list's singular display name"""
  singular: String

  """The list's plural display name"""
  plural: String

  """The list's data path"""
  path: String

  """Access control configuration for the currently authenticated request"""
  access: _ListAccess

  """Information on the generated GraphQL schema"""
  schema: _ListSchema
}

type _QueryMeta {
  count: Int
}

input _ksListsMetaInput {
  key: String

  """Whether this is an auxiliary helper list"""
  auxiliary: Boolean
}

input _ListSchemaFieldsInput {
  type: String
}

type Query {
  """ Search for all User items which match the where clause. """
  allUsers(where: UserWhereInput, search: String, sortBy: [SortUsersBy!], orderBy: String, first: Int, skip: Int): [User]

  """ Search for the User item with the matching ID. """
  User(where: UserWhereUniqueInput!): User

  """ Perform a meta-query on all User items which match the where clause. """
  _allUsersMeta(where: UserWhereInput, search: String, sortBy: [SortUsersBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the User list. """
  _UsersMeta: _ListMeta

  """ Search for all Product items which match the where clause. """
  allProducts(where: ProductWhereInput, search: String, sortBy: [SortProductsBy!], orderBy: String, first: Int, skip: Int): [Product]

  """ Search for the Product item with the matching ID. """
  Product(where: ProductWhereUniqueInput!): Product

  """ Perform a meta-query on all Product items which match the where clause. 
  """
  _allProductsMeta(where: ProductWhereInput, search: String, sortBy: [SortProductsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the Product list. """
  _ProductsMeta: _ListMeta

  """ Search for all ProductImage items which match the where clause. """
  allProductImages(where: ProductImageWhereInput, search: String, sortBy: [SortProductImagesBy!], orderBy: String, first: Int, skip: Int): [ProductImage]

  """ Search for the ProductImage item with the matching ID. """
  ProductImage(where: ProductImageWhereUniqueInput!): ProductImage

  """ Perform a meta-query on all ProductImage items which match the where clause. 
  """
  _allProductImagesMeta(where: ProductImageWhereInput, search: String, sortBy: [SortProductImagesBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the ProductImage list. """
  _ProductImagesMeta: _ListMeta

  """ Search for all Review items which match the where clause. """
  allReviews(where: ReviewWhereInput, search: String, sortBy: [SortReviewsBy!], orderBy: String, first: Int, skip: Int): [Review]

  """ Search for the Review item with the matching ID. """
  Review(where: ReviewWhereUniqueInput!): Review

  """ Perform a meta-query on all Review items which match the where clause. 
  """
  _allReviewsMeta(where: ReviewWhereInput, search: String, sortBy: [SortReviewsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the Review list. """
  _ReviewsMeta: _ListMeta

  """ Search for all ProductCategory items which match the where clause. """
  allProductCategories(where: ProductCategoryWhereInput, search: String, sortBy: [SortProductCategoriesBy!], orderBy: String, first: Int, skip: Int): [ProductCategory]

  """ Search for the ProductCategory item with the matching ID. """
  ProductCategory(where: ProductCategoryWhereUniqueInput!): ProductCategory

  """ Perform a meta-query on all ProductCategory items which match the where clause. 
  """
  _allProductCategoriesMeta(where: ProductCategoryWhereInput, search: String, sortBy: [SortProductCategoriesBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the ProductCategory list. """
  _ProductCategoriesMeta: _ListMeta

  """ Search for all WishList items which match the where clause. """
  allWishLists(where: WishListWhereInput, search: String, sortBy: [SortWishListsBy!], orderBy: String, first: Int, skip: Int): [WishList]

  """ Search for the WishList item with the matching ID. """
  WishList(where: WishListWhereUniqueInput!): WishList

  """ Perform a meta-query on all WishList items which match the where clause. 
  """
  _allWishListsMeta(where: WishListWhereInput, search: String, sortBy: [SortWishListsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the WishList list. """
  _WishListsMeta: _ListMeta

  """ Search for all WishListItem items which match the where clause. """
  allWishListItems(where: WishListItemWhereInput, search: String, sortBy: [SortWishListItemsBy!], orderBy: String, first: Int, skip: Int): [WishListItem]

  """ Search for the WishListItem item with the matching ID. """
  WishListItem(where: WishListItemWhereUniqueInput!): WishListItem

  """ Perform a meta-query on all WishListItem items which match the where clause. 
  """
  _allWishListItemsMeta(where: WishListItemWhereInput, search: String, sortBy: [SortWishListItemsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the WishListItem list. """
  _WishListItemsMeta: _ListMeta

  """ Search for all Cart items which match the where clause. """
  allCarts(where: CartWhereInput, search: String, sortBy: [SortCartsBy!], orderBy: String, first: Int, skip: Int): [Cart]

  """ Search for the Cart item with the matching ID. """
  Cart(where: CartWhereUniqueInput!): Cart

  """ Perform a meta-query on all Cart items which match the where clause. """
  _allCartsMeta(where: CartWhereInput, search: String, sortBy: [SortCartsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the Cart list. """
  _CartsMeta: _ListMeta

  """ Search for all CartItem items which match the where clause. """
  allCartItems(where: CartItemWhereInput, search: String, sortBy: [SortCartItemsBy!], orderBy: String, first: Int, skip: Int): [CartItem]

  """ Search for the CartItem item with the matching ID. """
  CartItem(where: CartItemWhereUniqueInput!): CartItem

  """ Perform a meta-query on all CartItem items which match the where clause. 
  """
  _allCartItemsMeta(where: CartItemWhereInput, search: String, sortBy: [SortCartItemsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the CartItem list. """
  _CartItemsMeta: _ListMeta

  """ Search for all OrderItem items which match the where clause. """
  allOrderItems(where: OrderItemWhereInput, search: String, sortBy: [SortOrderItemsBy!], orderBy: String, first: Int, skip: Int): [OrderItem]

  """ Search for the OrderItem item with the matching ID. """
  OrderItem(where: OrderItemWhereUniqueInput!): OrderItem

  """ Perform a meta-query on all OrderItem items which match the where clause. 
  """
  _allOrderItemsMeta(where: OrderItemWhereInput, search: String, sortBy: [SortOrderItemsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the OrderItem list. """
  _OrderItemsMeta: _ListMeta

  """ Search for all Order items which match the where clause. """
  allOrders(where: OrderWhereInput, search: String, sortBy: [SortOrdersBy!], orderBy: String, first: Int, skip: Int): [Order]

  """ Search for the Order item with the matching ID. """
  Order(where: OrderWhereUniqueInput!): Order

  """ Perform a meta-query on all Order items which match the where clause. 
  """
  _allOrdersMeta(where: OrderWhereInput, search: String, sortBy: [SortOrdersBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the Order list. """
  _OrdersMeta: _ListMeta

  """ Search for all Customer items which match the where clause. """
  allCustomers(where: CustomerWhereInput, search: String, sortBy: [SortCustomersBy!], orderBy: String, first: Int, skip: Int): [Customer]

  """ Search for the Customer item with the matching ID. """
  Customer(where: CustomerWhereUniqueInput!): Customer

  """ Perform a meta-query on all Customer items which match the where clause. 
  """
  _allCustomersMeta(where: CustomerWhereInput, search: String, sortBy: [SortCustomersBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the Customer list. """
  _CustomersMeta: _ListMeta

  """ Search for all Storefront items which match the where clause. """
  allStorefronts(where: StorefrontWhereInput, search: String, sortBy: [SortStorefrontsBy!], orderBy: String, first: Int, skip: Int): [Storefront]

  """ Search for the Storefront item with the matching ID. """
  Storefront(where: StorefrontWhereUniqueInput!): Storefront

  """ Perform a meta-query on all Storefront items which match the where clause. 
  """
  _allStorefrontsMeta(where: StorefrontWhereInput, search: String, sortBy: [SortStorefrontsBy!], orderBy: String, first: Int, skip: Int): _QueryMeta

  """ Retrieve the meta-data for the Storefront list. """
  _StorefrontsMeta: _ListMeta

  """ Retrieve the meta-data for all lists. """
  _ksListsMeta(where: _ksListsMetaInput): [_ListMeta]

  """The version of the Keystone application serving this API."""
  appVersion: String
  authenticatedItem: AuthenticatedItem
  keystone: KeystoneMeta!
}

type Mutation {
  """ Create a single User item. """
  createUser(data: UserCreateInput): User

  """ Create multiple User items. """
  createUsers(data: [UsersCreateInput]): [User]

  """ Update a single User item by ID. """
  updateUser(id: ID!, data: UserUpdateInput): User

  """ Update multiple User items by ID. """
  updateUsers(data: [UsersUpdateInput]): [User]

  """ Delete a single User item by ID. """
  deleteUser(id: ID!): User

  """ Delete multiple User items by ID. """
  deleteUsers(ids: [ID!]): [User]

  """ Create a single Product item. """
  createProduct(data: ProductCreateInput): Product

  """ Create multiple Product items. """
  createProducts(data: [ProductsCreateInput]): [Product]

  """ Update a single Product item by ID. """
  updateProduct(id: ID!, data: ProductUpdateInput): Product

  """ Update multiple Product items by ID. """
  updateProducts(data: [ProductsUpdateInput]): [Product]

  """ Delete a single Product item by ID. """
  deleteProduct(id: ID!): Product

  """ Delete multiple Product items by ID. """
  deleteProducts(ids: [ID!]): [Product]

  """ Create a single ProductImage item. """
  createProductImage(data: ProductImageCreateInput): ProductImage

  """ Create multiple ProductImage items. """
  createProductImages(data: [ProductImagesCreateInput]): [ProductImage]

  """ Update a single ProductImage item by ID. """
  updateProductImage(id: ID!, data: ProductImageUpdateInput): ProductImage

  """ Update multiple ProductImage items by ID. """
  updateProductImages(data: [ProductImagesUpdateInput]): [ProductImage]

  """ Delete a single ProductImage item by ID. """
  deleteProductImage(id: ID!): ProductImage

  """ Delete multiple ProductImage items by ID. """
  deleteProductImages(ids: [ID!]): [ProductImage]

  """ Create a single Review item. """
  createReview(data: ReviewCreateInput): Review

  """ Create multiple Review items. """
  createReviews(data: [ReviewsCreateInput]): [Review]

  """ Update a single Review item by ID. """
  updateReview(id: ID!, data: ReviewUpdateInput): Review

  """ Update multiple Review items by ID. """
  updateReviews(data: [ReviewsUpdateInput]): [Review]

  """ Delete a single Review item by ID. """
  deleteReview(id: ID!): Review

  """ Delete multiple Review items by ID. """
  deleteReviews(ids: [ID!]): [Review]

  """ Create a single ProductCategory item. """
  createProductCategory(data: ProductCategoryCreateInput): ProductCategory

  """ Create multiple ProductCategory items. """
  createProductCategories(data: [ProductCategoriesCreateInput]): [ProductCategory]

  """ Update a single ProductCategory item by ID. """
  updateProductCategory(id: ID!, data: ProductCategoryUpdateInput): ProductCategory

  """ Update multiple ProductCategory items by ID. """
  updateProductCategories(data: [ProductCategoriesUpdateInput]): [ProductCategory]

  """ Delete a single ProductCategory item by ID. """
  deleteProductCategory(id: ID!): ProductCategory

  """ Delete multiple ProductCategory items by ID. """
  deleteProductCategories(ids: [ID!]): [ProductCategory]

  """ Create a single WishList item. """
  createWishList(data: WishListCreateInput): WishList

  """ Create multiple WishList items. """
  createWishLists(data: [WishListsCreateInput]): [WishList]

  """ Update a single WishList item by ID. """
  updateWishList(id: ID!, data: WishListUpdateInput): WishList

  """ Update multiple WishList items by ID. """
  updateWishLists(data: [WishListsUpdateInput]): [WishList]

  """ Delete a single WishList item by ID. """
  deleteWishList(id: ID!): WishList

  """ Delete multiple WishList items by ID. """
  deleteWishLists(ids: [ID!]): [WishList]

  """ Create a single WishListItem item. """
  createWishListItem(data: WishListItemCreateInput): WishListItem

  """ Create multiple WishListItem items. """
  createWishListItems(data: [WishListItemsCreateInput]): [WishListItem]

  """ Update a single WishListItem item by ID. """
  updateWishListItem(id: ID!, data: WishListItemUpdateInput): WishListItem

  """ Update multiple WishListItem items by ID. """
  updateWishListItems(data: [WishListItemsUpdateInput]): [WishListItem]

  """ Delete a single WishListItem item by ID. """
  deleteWishListItem(id: ID!): WishListItem

  """ Delete multiple WishListItem items by ID. """
  deleteWishListItems(ids: [ID!]): [WishListItem]

  """ Create a single Cart item. """
  createCart(data: CartCreateInput): Cart

  """ Create multiple Cart items. """
  createCarts(data: [CartsCreateInput]): [Cart]

  """ Update a single Cart item by ID. """
  updateCart(id: ID!, data: CartUpdateInput): Cart

  """ Update multiple Cart items by ID. """
  updateCarts(data: [CartsUpdateInput]): [Cart]

  """ Delete a single Cart item by ID. """
  deleteCart(id: ID!): Cart

  """ Delete multiple Cart items by ID. """
  deleteCarts(ids: [ID!]): [Cart]

  """ Create a single CartItem item. """
  createCartItem(data: CartItemCreateInput): CartItem

  """ Create multiple CartItem items. """
  createCartItems(data: [CartItemsCreateInput]): [CartItem]

  """ Update a single CartItem item by ID. """
  updateCartItem(id: ID!, data: CartItemUpdateInput): CartItem

  """ Update multiple CartItem items by ID. """
  updateCartItems(data: [CartItemsUpdateInput]): [CartItem]

  """ Delete a single CartItem item by ID. """
  deleteCartItem(id: ID!): CartItem

  """ Delete multiple CartItem items by ID. """
  deleteCartItems(ids: [ID!]): [CartItem]

  """ Create a single OrderItem item. """
  createOrderItem(data: OrderItemCreateInput): OrderItem

  """ Create multiple OrderItem items. """
  createOrderItems(data: [OrderItemsCreateInput]): [OrderItem]

  """ Update a single OrderItem item by ID. """
  updateOrderItem(id: ID!, data: OrderItemUpdateInput): OrderItem

  """ Update multiple OrderItem items by ID. """
  updateOrderItems(data: [OrderItemsUpdateInput]): [OrderItem]

  """ Delete a single OrderItem item by ID. """
  deleteOrderItem(id: ID!): OrderItem

  """ Delete multiple OrderItem items by ID. """
  deleteOrderItems(ids: [ID!]): [OrderItem]

  """ Create a single Order item. """
  createOrder(data: OrderCreateInput): Order

  """ Create multiple Order items. """
  createOrders(data: [OrdersCreateInput]): [Order]

  """ Update a single Order item by ID. """
  updateOrder(id: ID!, data: OrderUpdateInput): Order

  """ Update multiple Order items by ID. """
  updateOrders(data: [OrdersUpdateInput]): [Order]

  """ Delete a single Order item by ID. """
  deleteOrder(id: ID!): Order

  """ Delete multiple Order items by ID. """
  deleteOrders(ids: [ID!]): [Order]

  """ Create a single Customer item. """
  createCustomer(data: CustomerCreateInput): Customer

  """ Create multiple Customer items. """
  createCustomers(data: [CustomersCreateInput]): [Customer]

  """ Update a single Customer item by ID. """
  updateCustomer(id: ID!, data: CustomerUpdateInput): Customer

  """ Update multiple Customer items by ID. """
  updateCustomers(data: [CustomersUpdateInput]): [Customer]

  """ Delete a single Customer item by ID. """
  deleteCustomer(id: ID!): Customer

  """ Delete multiple Customer items by ID. """
  deleteCustomers(ids: [ID!]): [Customer]

  """ Create a single Storefront item. """
  createStorefront(data: StorefrontCreateInput): Storefront

  """ Create multiple Storefront items. """
  createStorefronts(data: [StorefrontsCreateInput]): [Storefront]

  """ Update a single Storefront item by ID. """
  updateStorefront(id: ID!, data: StorefrontUpdateInput): Storefront

  """ Update multiple Storefront items by ID. """
  updateStorefronts(data: [StorefrontsUpdateInput]): [Storefront]

  """ Delete a single Storefront item by ID. """
  deleteStorefront(id: ID!): Storefront

  """ Delete multiple Storefront items by ID. """
  deleteStorefronts(ids: [ID!]): [Storefront]
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult!
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
  endSession: Boolean!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

union AuthenticatedItem = User

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  code: PasswordAuthErrorCode!
  message: String!
}

enum PasswordAuthErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  SECRET_NOT_SET
  MULTIPLE_IDENTITY_MATCHES
  SECRET_MISMATCH
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  fieldMeta: JSON
  viewsHash: String!
  customViewsHash: String
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
